import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
################################################################################
# |                                                                            #
# |     ______________________________________________________________         #
# |     :~8a.`~888a:::::::::::::::88......88:::::::::::::::;a8~".a88::|        #
# |     ::::~8a.`~888a::::::::::::88......88::::::::::::;a8~".a888~:::|        #
# |     :::::::~8a.`~888a:::::::::88......88:::::::::;a8~".a888~::::::|        #
# |     ::::::::::~8a.`~888a::::::88......88::::::;a8~".a888~:::::::::|        #
# |     :::::::::::::~8a.`~888a:::88......88:::;a8~".a888~::::::::::::|        #
# |     ::::::::::::  :~8a.`~888a:88 .....88;a8~".a888~:::::::::::::::|        #
# |     :::::::::::::::::::~8a.`~888......88~".a888~::::::::::::::::::|        #
# |     8888888888888888888888888888......8888888888888888888888888888|        #
# |     ..............................................................|        #
# |     ..............................................................|        #
# |     8888888888888888888888888888......8888888888888888888888888888|        #
# |     ::::::::::::::::::a888~".a88......888a."~8;:::::::::::::::::::|        #
# |     :::::::::::::::a888~".a8~:88......88~888a."~8;::::::::::::::::|        #
# |     ::::::::::::a888~".a8~::::88......88:::~888a."~8;:::::::::::::|        # 
# |     :::::::::a888~".a8~:::::::88......88::::::~888a."~8;::::::::::|        #
# |     ::::::a888~".a8~::::::::::88......88:::::::::~888a."~8;:::::::|        #
# |     :::a888~".a8~:::::::::::::88......88::::::::::::~888a."~8;::::|        #
# |     a888~".a8~::::::::::::::::88......88:::::::::::::::~888a."~8;:|        #
# |                                                                            #
# |    Rebirth Addon                                                           #
# |    Copyright (C) 2017 Cypher                                               #
# |                                                                            #
# |    This program is free software: you can redistribute it and/or modify    #
# |    it under the terms of the GNU General Public License as published by    #
# |    the Free Software Foundation, either version 3 of the License, or       #
# |    (at your option) any later version.                                     #
# |                                                                            #
# |    This program is distributed in the hope that it will be useful,         #
# |    but WITHOUT ANY WARRANTY; without even the implied warranty of          #
# |    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           #
# |    GNU General Public License for more details.                            #
# |                                                                            #
################################################################################
if 64 - 64: i11iIiiIii
if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
import urlparse , sys , urllib , xbmcaddon
import xbmc , os , zipfile , ntpath , xbmcgui
o0OO00 = xbmcgui . Dialog ( )
oo = dict ( urlparse . parse_qsl ( sys . argv [ 2 ] . replace ( '?' , '' ) ) )
if 27 - 27: oO0OooOoO * o0Oo
i1IiI1I11 = oo . get ( 'action' )
if 2 - 2: ooOO00oOo % oOo0O0Ooo * Ooo00oOo00o . oOoO0oo0OOOo + iiiiIi11i
Ii1I = oo . get ( 'name' )
if 48 - 48: iII111i % IiII + I1Ii111 / ooOoO0o * o00O0oo
O0oOO0o0 = oo . get ( 'title' )
if 9 - 9: o0o - OOO0o0o
Ii1iI = oo . get ( 'year' )
if 100 - 100: i11Ii11I1Ii1i . OOO0o0o - iIii1I11I1II1 . iiiiIi11i . iII111i / I1Ii111
II11i = oo . get ( 'imdb' )
if 43 - 43: ooOoO0o . iII111i
IIii11I1 = oo . get ( 'tvdb' )
if 59 - 59: iIii1I11I1II1
I11iii11IIi = oo . get ( 'tmdb' )
if 93 - 93: o00O0oo * i11iIiiIii * o0Oo % o00O0oo * o00O0oo * oO0OooOoO
o0o0Oo0oooo0 = oo . get ( 'season' )
if 97 - 97: ooOO00oOo - i11Ii11I1Ii1i
O0o = oo . get ( 'episode' )
if 97 - 97: oOo0O0Ooo . I1Ii111
IIIi1i1I = oo . get ( 'tvshowtitle' )
if 72 - 72: ooOO00oOo % IiII . o0Oo / I1Ii111 * o0Oo
iiiI11 = oo . get ( 'premiered' )
if 91 - 91: oOoO0oo0OOOo / oO0OooOoO . iiiiIi11i + IiII
iI11 = oo . get ( 'url' )
if 17 - 17: oOoO0oo0OOOo
o00ooooO0oO = oo . get ( 'image' )
if 63 - 63: Ooo00oOo00o % i1IIi
o0oOo0Ooo0O = oo . get ( 'meta' )
if 81 - 81: iiiiIi11i * o0o * I1Ii111 - o00O0oo - oOoO0oo0OOOo
OooO0OO = oo . get ( 'select' )
if 28 - 28: oO0OooOoO
iii11iII = oo . get ( 'query' )
if 42 - 42: OOO0o0o + iiiiIi11i
OOoO000O0OO = oo . get ( 'source' )
if 23 - 23: i11iIiiIii + o0Oo
oOo = oo . get ( 'content' )
if 63 - 63: ooOO00oOo
if 57 - 57: iII111i
if i1IiI1I11 == None :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . root ( )
 if 14 - 14: ooOO00oOo . o0Oo / ooOoO0o
elif i1IiI1I11 == 'movieNavigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . movies ( )
 if 38 - 38: oO0OooOoO % i11iIiiIii . i11Ii11I1Ii1i - IiII + ooOoO0o
elif i1IiI1I11 == 'movieliteNavigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . movies ( lite = True )
 if 66 - 66: OoooooooOO * OoooooooOO . IiII . i1IIi - IiII
elif i1IiI1I11 == 'mymovieNavigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . mymovies ( )
 if 77 - 77: I1Ii111 - iIii1I11I1II1
elif i1IiI1I11 == 'mymovieliteNavigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . mymovies ( lite = True )
 if 82 - 82: i11iIiiIii . IiII / ooOO00oOo * O0 % iII111i % iIii1I11I1II1
elif i1IiI1I11 == 'tvNavigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . tvshows ( )
 if 78 - 78: iIii1I11I1II1 - ooOoO0o * oOo0O0Ooo + oOoO0oo0OOOo + o00O0oo + o00O0oo
elif i1IiI1I11 == 'tvliteNavigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . tvshows ( lite = True )
 if 11 - 11: o00O0oo - oOo0O0Ooo % i11Ii11I1Ii1i % o00O0oo / Ooo00oOo00o - oOo0O0Ooo
elif i1IiI1I11 == 'mytvNavigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . mytvshows ( )
 if 74 - 74: o00O0oo * O0
elif i1IiI1I11 == 'mytvliteNavigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . mytvshows ( lite = True )
 if 89 - 89: iII111i + ooOO00oOo
elif i1IiI1I11 == 'movieMosts' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . movieMosts ( )
 if 3 - 3: i1IIi / o0Oo % I1Ii111 * i11iIiiIii / O0 * I1Ii111
elif i1IiI1I11 == 'showMosts' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . showMosts ( )
 if 49 - 49: iII111i % ooOoO0o + i1IIi . o0Oo % iiiiIi11i
elif i1IiI1I11 == 'playlistNavigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . playlist ( )
 if 48 - 48: I1Ii111 + I1Ii111 / oO0OooOoO / iIii1I11I1II1
elif i1IiI1I11 == 'playlistliteNavigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . playlist ( lite = True )
 if 20 - 20: oOoO0oo0OOOo
elif i1IiI1I11 == 'spikeNavigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . spike ( )
 if 77 - 77: Ooo00oOo00o / I1Ii111
elif i1IiI1I11 == 'spikeliteNavigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . spike ( lite = True )
 if 98 - 98: iIii1I11I1II1 / i1IIi / i11iIiiIii / oOoO0oo0OOOo
elif i1IiI1I11 == 'customNavigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . custom ( )
 if 28 - 28: IiII - o0o . o0o + Ooo00oOo00o - OoooooooOO + O0
elif i1IiI1I11 == 'custom2Navigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . custom2 ( )
 if 95 - 95: oOo0O0Ooo % iII111i . O0
elif i1IiI1I11 == 'customliteNavigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . custom ( lite = True )
 if 15 - 15: i11Ii11I1Ii1i / ooOoO0o . ooOoO0o - i1IIi
 if 53 - 53: o0o + o0Oo * iII111i
elif i1IiI1I11 == 'downloadNavigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . downloads ( )
 if 61 - 61: i1IIi * IiII / OoooooooOO . i11iIiiIii . Ooo00oOo00o
elif i1IiI1I11 == 'libraryNavigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . library ( )
 if 60 - 60: I1Ii111 / I1Ii111
elif i1IiI1I11 == 'toolNavigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . tools ( )
 if 46 - 46: ooOoO0o * IiII - oOo0O0Ooo * iII111i - OOO0o0o
elif i1IiI1I11 == 'searchNavigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . search ( )
 if 83 - 83: OoooooooOO
elif i1IiI1I11 == 'viewsNavigator' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . views ( )
 if 31 - 31: oO0OooOoO - IiII . OOO0o0o % Ooo00oOo00o - O0
elif i1IiI1I11 == 'clearCache' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . clearCache ( )
 if 4 - 4: oO0OooOoO / i11Ii11I1Ii1i . o00O0oo
elif i1IiI1I11 == 'infoCheck' :
 from resources . lib . indexers import navigator
 navigator . navigator ( ) . infoCheck ( '' )
 if 58 - 58: IiII * i11iIiiIii / Ooo00oOo00o % OOO0o0o - iiiiIi11i / iII111i
elif i1IiI1I11 == 'movies' :
 from resources . lib . indexers import movies
 movies . movies ( ) . get ( iI11 )
 if 50 - 50: o0Oo
elif i1IiI1I11 == 'moviePage' :
 from resources . lib . indexers import movies
 movies . movies ( ) . get ( iI11 )
 if 34 - 34: o0Oo * oO0OooOoO % o00O0oo * Ooo00oOo00o - o0Oo
elif i1IiI1I11 == 'movieWidget' :
 from resources . lib . indexers import movies
 movies . movies ( ) . widget ( )
 if 33 - 33: oOoO0oo0OOOo + IiII * oOo0O0Ooo - ooOO00oOo / iII111i % ooOoO0o
elif i1IiI1I11 == 'movieSearch' :
 from resources . lib . indexers import movies
 movies . movies ( ) . search ( )
 if 21 - 21: oOo0O0Ooo * iIii1I11I1II1 % iII111i * i1IIi
elif i1IiI1I11 == 'moviePerson' :
 from resources . lib . indexers import movies
 movies . movies ( ) . person ( )
 if 16 - 16: O0 - OOO0o0o * iIii1I11I1II1 + o00O0oo
elif i1IiI1I11 == 'movieGenres' :
 from resources . lib . indexers import movies
 movies . movies ( ) . genres ( )
 if 50 - 50: oO0OooOoO - i11Ii11I1Ii1i * iiiiIi11i / OOO0o0o + oOoO0oo0OOOo
elif i1IiI1I11 == 'movieLanguages' :
 from resources . lib . indexers import movies
 movies . movies ( ) . languages ( )
 if 88 - 88: ooOoO0o / OOO0o0o + o00O0oo - oO0OooOoO / i11Ii11I1Ii1i - Ooo00oOo00o
elif i1IiI1I11 == 'movieCertificates' :
 from resources . lib . indexers import movies
 movies . movies ( ) . certifications ( )
 if 15 - 15: iiiiIi11i + Ooo00oOo00o - OoooooooOO / IiII
elif i1IiI1I11 == 'movieYears' :
 from resources . lib . indexers import movies
 movies . movies ( ) . years ( )
 if 58 - 58: i11iIiiIii % I1Ii111
elif i1IiI1I11 == 'moviePersons' :
 from resources . lib . indexers import movies
 movies . movies ( ) . persons ( iI11 )
 if 71 - 71: IiII + i11Ii11I1Ii1i % i11iIiiIii + iiiiIi11i - o0o
elif i1IiI1I11 == 'movieUserlists' :
 from resources . lib . indexers import movies
 movies . movies ( ) . userlists ( )
 if 88 - 88: Ooo00oOo00o - oOo0O0Ooo % IiII
elif i1IiI1I11 == 'channels' :
 from resources . lib . indexers import channels
 channels . channels ( ) . get ( )
 if 16 - 16: o0Oo * iII111i % o0o
elif i1IiI1I11 == 'tvshows' :
 from resources . lib . indexers import tvshows
 tvshows . tvshows ( ) . get ( iI11 )
 if 86 - 86: o0Oo + ooOoO0o % i11iIiiIii * iII111i . i11Ii11I1Ii1i * I1Ii111
elif i1IiI1I11 == 'tvshowPage' :
 from resources . lib . indexers import tvshows
 tvshows . tvshows ( ) . get ( iI11 )
 if 44 - 44: iII111i
elif i1IiI1I11 == 'tvSearch' :
 from resources . lib . indexers import tvshows
 tvshows . tvshows ( ) . search ( )
 if 88 - 88: OOO0o0o % ooOoO0o . oO0OooOoO
elif i1IiI1I11 == 'tvPerson' :
 from resources . lib . indexers import tvshows
 tvshows . tvshows ( ) . person ( )
 if 38 - 38: oOoO0oo0OOOo
elif i1IiI1I11 == 'tvGenres' :
 from resources . lib . indexers import tvshows
 tvshows . tvshows ( ) . genres ( )
 if 57 - 57: O0 / iII111i * OOO0o0o / Ooo00oOo00o . oO0OooOoO
elif i1IiI1I11 == 'tvNetworks' :
 from resources . lib . indexers import tvshows
 tvshows . tvshows ( ) . networks ( )
 if 26 - 26: o00O0oo
elif i1IiI1I11 == 'tvLanguages' :
 from resources . lib . indexers import tvshows
 tvshows . tvshows ( ) . languages ( )
 if 91 - 91: oOo0O0Ooo . iiiiIi11i + oOo0O0Ooo - o00O0oo / OoooooooOO
elif i1IiI1I11 == 'tvCertificates' :
 from resources . lib . indexers import tvshows
 tvshows . tvshows ( ) . certifications ( )
 if 39 - 39: iiiiIi11i / i11Ii11I1Ii1i - oO0OooOoO
elif i1IiI1I11 == 'tvPersons' :
 from resources . lib . indexers import tvshows
 tvshows . tvshows ( ) . persons ( iI11 )
 if 98 - 98: iiiiIi11i / I1Ii111 % iII111i . Ooo00oOo00o
elif i1IiI1I11 == 'tvUserlists' :
 from resources . lib . indexers import tvshows
 tvshows . tvshows ( ) . userlists ( )
 if 91 - 91: iII111i % ooOO00oOo
elif i1IiI1I11 == 'seasons' :
 from resources . lib . indexers import episodes
 episodes . seasons ( ) . get ( IIIi1i1I , Ii1iI , II11i , IIii11I1 )
 if 64 - 64: I1Ii111 % o00O0oo - OOO0o0o - iII111i
elif i1IiI1I11 == 'episodes' :
 from resources . lib . indexers import episodes
 episodes . episodes ( ) . get ( IIIi1i1I , Ii1iI , II11i , IIii11I1 , o0o0Oo0oooo0 , O0o )
 if 31 - 31: I1Ii111 - oO0OooOoO . I1Ii111
elif i1IiI1I11 == 'calendar' :
 from resources . lib . indexers import episodes
 episodes . episodes ( ) . calendar ( iI11 )
 if 18 - 18: oOoO0oo0OOOo
elif i1IiI1I11 == 'tvWidget' :
 from resources . lib . indexers import episodes
 episodes . episodes ( ) . widget ( )
 if 98 - 98: o00O0oo * o00O0oo / o00O0oo + I1Ii111
elif i1IiI1I11 == 'calendars' :
 from resources . lib . indexers import episodes
 episodes . episodes ( ) . calendars ( )
 if 34 - 34: i11Ii11I1Ii1i
elif i1IiI1I11 == 'episodeUserlists' :
 from resources . lib . indexers import episodes
 episodes . episodes ( ) . userlists ( )
 if 15 - 15: I1Ii111 * i11Ii11I1Ii1i * ooOO00oOo % i11iIiiIii % Ooo00oOo00o - IiII
elif i1IiI1I11 == 'refresh' :
 from resources . lib . modules import control
 control . refresh ( )
 if 68 - 68: OOO0o0o % i1IIi . o0o . iiiiIi11i
elif i1IiI1I11 == 'queueItem' :
 from resources . lib . modules import control
 control . queueItem ( )
 if 92 - 92: o00O0oo . OOO0o0o
elif i1IiI1I11 == 'openSettings' :
 from resources . lib . modules import control
 control . openSettings ( iii11iII )
 if 31 - 31: OOO0o0o . Ooo00oOo00o / O0
elif i1IiI1I11 == 'artwork' :
 from resources . lib . modules import control
 control . artwork ( )
 if 89 - 89: Ooo00oOo00o
elif i1IiI1I11 == 'addView' :
 from resources . lib . modules import views
 views . addView ( oOo )
 if 68 - 68: oOo0O0Ooo * OoooooooOO % O0 + oOo0O0Ooo + i11Ii11I1Ii1i
elif i1IiI1I11 == 'moviePlaycount' :
 from resources . lib . modules import playcount
 playcount . movies ( II11i , iii11iII )
 if 4 - 4: i11Ii11I1Ii1i + O0 * IiII
elif i1IiI1I11 == 'episodePlaycount' :
 from resources . lib . modules import playcount
 playcount . episodes ( II11i , IIii11I1 , o0o0Oo0oooo0 , O0o , iii11iII )
 if 55 - 55: ooOO00oOo + iIii1I11I1II1 / Ooo00oOo00o * iII111i - i11iIiiIii - ooOoO0o
elif i1IiI1I11 == 'tvPlaycount' :
 from resources . lib . modules import playcount
 playcount . tvshows ( Ii1I , II11i , IIii11I1 , o0o0Oo0oooo0 , iii11iII )
 if 25 - 25: iiiiIi11i
elif i1IiI1I11 == 'trailer' :
 from resources . lib . modules import trailer
 trailer . trailer ( ) . play ( Ii1I , iI11 )
 if 7 - 7: i1IIi / o0Oo * OOO0o0o . o0o . iIii1I11I1II1
elif i1IiI1I11 == 'traktManager' :
 from resources . lib . modules import trakt
 trakt . manager ( Ii1I , II11i , IIii11I1 , oOo )
 if 13 - 13: IiII / i11iIiiIii
elif i1IiI1I11 == 'authTrakt' :
 from resources . lib . modules import trakt
 trakt . authTrakt ( )
 if 2 - 2: o0Oo / O0 / oOoO0oo0OOOo % Ooo00oOo00o % ooOoO0o
elif i1IiI1I11 == 'smuSettings' :
 try : import urlresolver
 except : pass
 urlresolver . display_settings ( )
 if 52 - 52: oOoO0oo0OOOo
elif i1IiI1I11 == 'download' :
 import json
 from resources . lib . modules import sources
 from resources . lib . modules import downloader
 try : downloader . download ( Ii1I , o00ooooO0oO , sources . sources ( ) . sourcesResolve ( json . loads ( OOoO000O0OO ) [ 0 ] , True ) )
 except : pass
 if 95 - 95: ooOoO0o
elif i1IiI1I11 == 'play' :
 from resources . lib . modules import control
 OooO0OO = control . setting ( 'hosts.mode' )
 if OooO0OO == '3' and 'plugin' in control . infoLabel ( 'Container.PluginName' ) :
  from resources . lib . modules import sources
  sources . sources ( ) . play_dialog ( O0oOO0o0 , Ii1iI , II11i , IIii11I1 , o0o0Oo0oooo0 , O0o , IIIi1i1I , iiiI11 , o0oOo0Ooo0O , OooO0OO )
 elif OooO0OO == '4' and 'plugin' in control . infoLabel ( 'Container.PluginName' ) :
  from resources . lib . modules import sources
  sources . sources ( ) . play_dialog_list ( O0oOO0o0 , Ii1iI , II11i , IIii11I1 , o0o0Oo0oooo0 , O0o , IIIi1i1I , iiiI11 , o0oOo0Ooo0O , OooO0OO )
 else :
  from resources . lib . modules import sources
  sources . sources ( ) . play ( O0oOO0o0 , Ii1iI , II11i , IIii11I1 , o0o0Oo0oooo0 , O0o , IIIi1i1I , iiiI11 , o0oOo0Ooo0O , OooO0OO )
  if 87 - 87: i11Ii11I1Ii1i + Ooo00oOo00o . IiII + Ooo00oOo00o
  if 91 - 91: O0
elif i1IiI1I11 == 'play_alter' :
 from resources . lib . modules import sources
 sources . sources ( ) . play_alter ( O0oOO0o0 , Ii1iI , II11i , IIii11I1 , o0o0Oo0oooo0 , O0o , IIIi1i1I , iiiI11 , o0oOo0Ooo0O )
elif i1IiI1I11 == 'addItem' :
 from resources . lib . modules import sources
 sources . sources ( ) . addItem ( O0oOO0o0 )
 if 61 - 61: oO0OooOoO
elif i1IiI1I11 == 'playItem' :
 from resources . lib . modules import sources
 sources . sources ( ) . playItem ( O0oOO0o0 , OOoO000O0OO )
 if 64 - 64: i11Ii11I1Ii1i / Ooo00oOo00o - O0 - I1Ii111
elif i1IiI1I11 == 'alterSources' :
 from resources . lib . modules import sources
 sources . sources ( ) . alterSources ( iI11 , o0oOo0Ooo0O )
 if 86 - 86: I1Ii111 % Ooo00oOo00o / o0Oo / Ooo00oOo00o
elif i1IiI1I11 == 'clearSources' :
 from resources . lib . modules import sources
 sources . sources ( ) . clearSources ( )
 if 42 - 42: oOo0O0Ooo
elif i1IiI1I11 == 'random' :
 o0oo00 = oo . get ( 'rtype' )
 if o0oo00 == 'movie' :
  from resources . lib . indexers import movies
  OooOO000 = movies . movies ( ) . get ( iI11 , create_directory = False )
  OOoOoo = sys . argv [ 0 ] + "?action=play"
 elif o0oo00 == 'episode' :
  from resources . lib . indexers import episodes
  OooOO000 = episodes . episodes ( ) . get ( IIIi1i1I , Ii1iI , II11i , IIii11I1 , o0o0Oo0oooo0 , create_directory = False )
  OOoOoo = sys . argv [ 0 ] + "?action=play"
 elif o0oo00 == 'season' :
  from resources . lib . indexers import episodes
  OooOO000 = episodes . seasons ( ) . get ( IIIi1i1I , Ii1iI , II11i , IIii11I1 , create_directory = False )
  OOoOoo = sys . argv [ 0 ] + "?action=random&rtype=episode"
 elif o0oo00 == 'show' :
  from resources . lib . indexers import tvshows
  OooOO000 = tvshows . tvshows ( ) . get ( iI11 , create_directory = False )
  OOoOoo = sys . argv [ 0 ] + "?action=random&rtype=season"
 from resources . lib . modules import control
 from random import randint
 import json
 try :
  oO0000OOo00 = randint ( 1 , len ( OooOO000 ) ) - 1
  for iiIi1IIiIi in [ 'title' , 'year' , 'imdb' , 'tvdb' , 'season' , 'episode' , 'tvshowtitle' , 'premiered' , 'select' ] :
   if o0oo00 == "show" and iiIi1IIiIi == "tvshowtitle" :
    try : OOoOoo += '&' + iiIi1IIiIi + '=' + urllib . quote_plus ( OooOO000 [ oO0000OOo00 ] [ 'title' ] )
    except : pass
   else :
    try : OOoOoo += '&' + iiIi1IIiIi + '=' + urllib . quote_plus ( OooOO000 [ oO0000OOo00 ] [ iiIi1IIiIi ] )
    except : pass
  try : OOoOoo += '&meta=' + urllib . quote_plus ( json . dumps ( OooOO000 [ oO0000OOo00 ] ) )
  except : OOoOoo += '&meta=' + urllib . quote_plus ( "{}" )
  if o0oo00 == "movie" :
   try : control . infoDialog ( OooOO000 [ oO0000OOo00 ] [ 'title' ] , control . lang ( 32536 ) . encode ( 'utf-8' ) , time = 30000 )
   except : pass
  elif o0oo00 == "episode" :
   try : control . infoDialog ( OooOO000 [ oO0000OOo00 ] [ 'tvshowtitle' ] + " - Season " + OooOO000 [ oO0000OOo00 ] [ 'season' ] + " - " + OooOO000 [ oO0000OOo00 ] [ 'title' ] , control . lang ( 32536 ) . encode ( 'utf-8' ) , time = 30000 )
   except : pass
  control . execute ( 'RunPlugin(%s)' % OOoOoo )
 except :
  control . infoDialog ( control . lang ( 32537 ) . encode ( 'utf-8' ) , time = 8000 )
  if 75 - 75: o0Oo + ooOO00oOo
elif i1IiI1I11 == 'movieToLibrary' :
 from resources . lib . modules import libtools
 libtools . libmovies ( ) . add ( Ii1I , O0oOO0o0 , Ii1iI , II11i , I11iii11IIi )
 if 73 - 73: O0 - OoooooooOO . IiII - IiII / Ooo00oOo00o
elif i1IiI1I11 == 'moviesToLibrary' :
 from resources . lib . modules import libtools
 libtools . libmovies ( ) . range ( iI11 )
 if 45 - 45: iIii1I11I1II1 % oOo0O0Ooo
elif i1IiI1I11 == 'tvshowToLibrary' :
 from resources . lib . modules import libtools
 libtools . libtvshows ( ) . add ( IIIi1i1I , Ii1iI , II11i , IIii11I1 )
 if 29 - 29: IiII + ooOO00oOo . i11iIiiIii - i1IIi / iIii1I11I1II1
elif i1IiI1I11 == 'tvshowsToLibrary' :
 from resources . lib . modules import libtools
 libtools . libtvshows ( ) . range ( iI11 )
 if 26 - 26: I1Ii111 . OoooooooOO
elif i1IiI1I11 == 'updateLibrary' :
 from resources . lib . modules import libtools
 libtools . libepisodes ( ) . update ( iii11iII )
 if 39 - 39: o00O0oo - O0 % i11iIiiIii * OOO0o0o . o0o
elif i1IiI1I11 == 'service' :
 from resources . lib . modules import libtools
 libtools . libepisodes ( ) . service ( )
 if 58 - 58: oOo0O0Ooo % i11iIiiIii . o00O0oo / iII111i
elif i1IiI1I11 == 'nanscrapersettings' : xbmcaddon . Addon ( 'script.module.nanscrapers' ) . openSettings ( )
elif i1IiI1I11 == 'weathersettings' : xbmcaddon . Addon ( 'weather.openweathermap.extended' ) . openSettings ( )
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
]')